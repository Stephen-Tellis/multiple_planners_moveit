<launch>

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
           value="gdb -x $(find ur10e_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="pipeline" default="pilz_industrial_motion_planner" />
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <arg name="secondary_pipeline" default="ompl" />
  <arg name="secondary_namespace" default="secondary" />

  <arg name="capabilities" default=""/>
  <arg name="disable_capabilities" default=""/>

  <arg name="load_robot_description" default="true" />
  <!-- load URDF, SRDF and joint_limits configuration -->
  <include file="$(find ur10e_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="$(arg load_robot_description)" />
  </include>

  <!-- Planning Functionality -->
  <include ns="/$(arg secondary_namespace)/move_group" file="$(find ur10e_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="$(arg secondary_pipeline)" />
  </include>

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find ur10e_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="$(arg pipeline)" />
  </include>

  <!-- Trajectory Execution Functionality for secondary -->
  <!-- Donot include trajectory execution functionality for secondary_namespace use the primary interface to execute secondary plans -->


  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find ur10e_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="ur10e" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
    <param name="capabilities" value="pilz_industrial_motion_planner/MoveGroupSequenceAction"/>
    <param name="disable_capabilities" value="$(arg disable_capabilities)"/>
    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>

  <!-- <remap from="/$(arg secondary_namespace)/move_group/monitored_planning_scene" to="/move_group/monitored_planning_scene"/>
  <remap from="/$(arg secondary_namespace)/planning_scene" to="/planning_scene"/> -->
  <!-- <remap from="/$(arg secondary_namespace)/planning_scene_world" to="/planning_scene_world"/> -->

  <group ns="$(arg secondary_namespace)">
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="false"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
    <param name="planning_scene_monitor/publish_planning_scene" value="True" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="True" />
    <param name="planning_scene_monitor/publish_state_updates" value="True" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="True" />

    <remap from="/$(arg secondary_namespace)/joint_states" to="/joint_states"/>

  </node>
  </group>

</launch>
